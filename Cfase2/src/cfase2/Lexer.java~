/* The following code was generated by JFlex 1.6.1 */



/* --------------------------Usercode Section------------------------ */
package cfase2;   
import java_cup.runtime.Symbol;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./Icalc.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\27\2\26\1\30\22\0\1\57\1\73\1\36\2\0"+
    "\1\67\1\74\1\0\1\102\1\103\1\2\1\66\1\77\1\35\1\34"+
    "\1\1\1\31\11\23\1\0\1\76\1\70\1\71\1\72\2\0\1\20"+
    "\1\65\2\33\1\16\1\17\1\64\1\24\1\62\2\24\1\21\1\63"+
    "\1\56\1\24\1\61\1\24\1\14\1\22\1\13\1\15\2\24\1\32"+
    "\2\24\1\100\1\37\1\101\1\0\1\25\1\0\1\10\1\45\1\47"+
    "\1\43\1\6\1\7\1\46\1\50\1\42\1\24\1\55\1\11\1\52"+
    "\1\44\1\41\1\53\1\24\1\4\1\12\1\3\1\5\1\40\1\54"+
    "\1\51\1\60\1\24\1\104\1\75\1\105\7\0\1\26\32\0\1\26"+
    "\u15df\0\1\26\u097f\0\13\26\35\0\2\26\5\0\1\26\57\0\1\26"+
    "\u0fa0\0\1\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\12\4\1\5\2\6\1\5"+
    "\1\7\1\10\1\1\13\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\2\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\0\14\4\1\0\1\30"+
    "\1\27\2\0\1\4\1\31\14\4\1\32\1\14\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\27\1\41\1\0"+
    "\6\4\1\42\5\4\1\30\1\0\1\43\1\44\1\4"+
    "\1\45\7\4\1\46\3\4\1\0\1\47\1\50\1\4"+
    "\1\51\4\4\1\52\3\4\1\53\1\4\1\54\2\4"+
    "\1\0\14\4\1\55\1\56\1\57\1\0\1\60\2\4"+
    "\1\61\1\4\1\62\5\4\1\63\1\0\1\64\1\4"+
    "\1\65\2\4\1\66\2\4\1\0\1\67\1\70\3\4"+
    "\1\0\1\4\1\71\1\4\1\72\1\4\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\106\0\322\0\u0118\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\106"+
    "\0\u03d4\0\u041a\0\106\0\106\0\u0460\0\u04a6\0\u04ec\0\u0532"+
    "\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762"+
    "\0\106\0\106\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906"+
    "\0\106\0\106\0\u094c\0\106\0\u0992\0\106\0\u09d8\0\106"+
    "\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08"+
    "\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38"+
    "\0\106\0\u0e7e\0\u0ec4\0\u0f0a\0\u015e\0\u0f50\0\u0f96\0\u0fdc"+
    "\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\106\0\106\0\106\0\106\0\106\0\106\0\106"+
    "\0\106\0\u03d4\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u015e\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u1626\0\u0e7e\0\106\0\u166c\0\u16b2\0\u16f8\0\u173e"+
    "\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e"+
    "\0\u19b4\0\u1298\0\u015e\0\u015e\0\u19fa\0\u015e\0\u1a40\0\u1a86"+
    "\0\u1acc\0\u1b12\0\u015e\0\u1b58\0\u1b9e\0\u1be4\0\u015e\0\u1c2a"+
    "\0\u015e\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14"+
    "\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u015e\0\u015e\0\u015e\0\u208a\0\u015e\0\u20d0\0\u2116\0\u015e"+
    "\0\u215c\0\u015e\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u015e"+
    "\0\u2300\0\u015e\0\u2346\0\u015e\0\u238c\0\u23d2\0\u015e\0\u2418"+
    "\0\u245e\0\u24a4\0\u015e\0\u015e\0\u24ea\0\u2530\0\u2576\0\u25bc"+
    "\0\u2602\0\u015e\0\u2648\0\106\0\u268e\0\u015e\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\7\1\12\1\13\1\14\2\7\1\15\2\7\1\16"+
    "\1\17\1\7\1\2\2\20\1\21\1\22\2\7\1\23"+
    "\1\24\1\25\1\2\1\26\1\7\1\27\1\30\1\31"+
    "\1\32\1\7\1\33\4\7\1\34\1\7\1\35\1\20"+
    "\1\7\1\36\1\7\1\37\1\40\1\7\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\107\0\1\61"+
    "\1\62\106\0\1\7\1\63\21\7\3\0\3\7\4\0"+
    "\10\7\1\64\6\7\1\0\6\7\23\0\3\7\1\65"+
    "\17\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\23\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\6\7\1\66\14\7\3\0\3\7\4\0\11\7\1\67"+
    "\5\7\1\0\6\7\23\0\5\7\1\70\15\7\3\0"+
    "\3\7\4\0\1\7\1\71\15\7\1\0\6\7\23\0"+
    "\1\72\22\7\3\0\3\7\4\0\17\7\1\0\6\7"+
    "\23\0\11\7\1\73\11\7\3\0\3\7\4\0\17\7"+
    "\1\0\6\7\23\0\3\7\1\74\17\7\3\0\3\7"+
    "\4\0\17\7\1\0\6\7\23\0\15\7\1\75\5\7"+
    "\3\0\3\7\4\0\17\7\1\0\6\7\23\0\3\7"+
    "\1\76\17\7\3\0\3\7\4\0\17\7\1\0\6\7"+
    "\26\0\1\77\7\0\1\77\4\0\1\17\5\0\1\17"+
    "\2\0\1\100\100\0\1\101\64\0\1\77\7\0\1\77"+
    "\4\0\1\17\5\0\1\17\1\102\1\0\1\100\14\0"+
    "\1\102\34\0\36\103\1\0\47\103\3\0\23\7\3\0"+
    "\3\7\4\0\1\7\1\104\15\7\1\0\6\7\23\0"+
    "\4\7\1\105\16\7\3\0\3\7\4\0\4\7\1\106"+
    "\5\7\1\107\4\7\1\0\6\7\23\0\23\7\3\0"+
    "\3\7\4\0\1\7\1\110\15\7\1\0\6\7\23\0"+
    "\2\7\1\111\20\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\23\0\1\7\1\112\21\7\3\0\3\7\4\0"+
    "\1\7\1\113\15\7\1\0\6\7\23\0\6\7\1\114"+
    "\14\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\23\7\3\0\3\7\4\0\10\7\1\115\6\7\1\0"+
    "\6\7\23\0\3\7\1\116\17\7\3\0\3\7\4\0"+
    "\17\7\1\0\6\7\23\0\1\7\1\117\21\7\3\0"+
    "\3\7\4\0\17\7\1\0\6\7\23\0\5\7\1\120"+
    "\15\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\3\7\1\121\17\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\111\0\1\122\105\0\1\123\105\0\1\124\105\0"+
    "\1\125\110\0\1\126\106\0\1\127\111\0\1\130\107\0"+
    "\1\131\107\0\1\101\27\61\1\101\1\132\55\61\2\133"+
    "\1\134\103\133\3\0\2\7\1\135\20\7\3\0\3\7"+
    "\4\0\17\7\1\0\6\7\23\0\23\7\3\0\3\7"+
    "\4\0\2\7\1\136\14\7\1\0\6\7\23\0\1\137"+
    "\22\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\7\7\1\140\13\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\23\0\1\141\22\7\3\0\3\7\4\0\17\7"+
    "\1\0\6\7\23\0\6\7\1\142\14\7\3\0\3\7"+
    "\4\0\17\7\1\0\6\7\23\0\1\7\1\143\21\7"+
    "\3\0\3\7\4\0\17\7\1\0\6\7\23\0\1\7"+
    "\1\144\21\7\3\0\3\7\4\0\17\7\1\0\6\7"+
    "\23\0\12\7\1\145\10\7\3\0\3\7\4\0\17\7"+
    "\1\0\6\7\23\0\5\7\1\146\15\7\3\0\3\7"+
    "\4\0\17\7\1\0\6\7\23\0\16\7\1\147\4\7"+
    "\3\0\3\7\4\0\17\7\1\0\6\7\23\0\1\150"+
    "\22\7\3\0\3\7\4\0\17\7\1\0\6\7\43\0"+
    "\1\151\5\0\1\151\3\0\1\152\30\0\1\152\25\0"+
    "\1\77\7\0\1\77\4\0\1\100\5\0\1\100\62\0"+
    "\3\153\5\0\3\153\2\0\1\153\5\0\1\153\1\0"+
    "\1\153\7\0\1\153\1\0\1\153\1\0\1\153\15\0"+
    "\1\153\20\0\27\103\2\0\5\103\1\154\1\0\46\103"+
    "\3\0\23\7\3\0\3\7\4\0\2\7\1\155\14\7"+
    "\1\0\6\7\23\0\1\156\22\7\3\0\3\7\4\0"+
    "\17\7\1\0\6\7\23\0\23\7\3\0\3\7\4\0"+
    "\13\7\1\157\3\7\1\0\6\7\23\0\2\7\1\160"+
    "\20\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\6\7\1\161\14\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\23\0\3\7\1\162\17\7\3\0\3\7\4\0"+
    "\17\7\1\0\6\7\23\0\23\7\3\0\3\7\4\0"+
    "\1\7\1\163\15\7\1\0\6\7\23\0\5\7\1\164"+
    "\15\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\23\7\3\0\3\7\4\0\2\7\1\165\14\7\1\0"+
    "\6\7\23\0\23\7\3\0\3\7\4\0\14\7\1\166"+
    "\2\7\1\0\6\7\23\0\23\7\3\0\3\7\4\0"+
    "\2\7\1\167\14\7\1\0\6\7\23\0\6\7\1\170"+
    "\14\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\1\171\22\7\3\0\3\7\4\0\17\7\1\0\6\7"+
    "\20\0\2\172\1\134\104\172\1\101\1\134\103\172\3\0"+
    "\3\7\1\173\17\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\23\0\7\7\1\174\13\7\3\0\3\7\4\0"+
    "\17\7\1\0\6\7\23\0\2\7\1\175\20\7\3\0"+
    "\3\7\4\0\17\7\1\0\6\7\23\0\3\7\1\176"+
    "\17\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\3\7\1\177\17\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\23\0\7\7\1\135\13\7\3\0\3\7\4\0"+
    "\17\7\1\0\6\7\23\0\23\7\3\0\3\7\4\0"+
    "\2\7\1\200\14\7\1\0\6\7\23\0\13\7\1\173"+
    "\7\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\23\7\3\0\3\7\4\0\3\7\1\201\13\7\1\0"+
    "\6\7\23\0\17\7\1\145\3\7\3\0\3\7\4\0"+
    "\17\7\1\0\6\7\23\0\23\7\3\0\3\7\4\0"+
    "\17\7\1\0\5\7\1\202\43\0\1\151\5\0\1\151"+
    "\57\0\23\7\3\0\3\7\4\0\3\7\1\203\13\7"+
    "\1\0\6\7\23\0\3\7\1\204\17\7\3\0\3\7"+
    "\4\0\17\7\1\0\6\7\23\0\6\7\1\205\14\7"+
    "\3\0\3\7\4\0\17\7\1\0\6\7\23\0\23\7"+
    "\3\0\3\7\4\0\5\7\1\206\11\7\1\0\6\7"+
    "\23\0\6\7\1\207\14\7\3\0\3\7\4\0\17\7"+
    "\1\0\6\7\23\0\5\7\1\210\15\7\3\0\3\7"+
    "\4\0\17\7\1\0\6\7\23\0\6\7\1\211\14\7"+
    "\3\0\3\7\4\0\17\7\1\0\6\7\23\0\7\7"+
    "\1\212\13\7\3\0\3\7\4\0\17\7\1\0\6\7"+
    "\23\0\6\7\1\213\14\7\3\0\3\7\4\0\17\7"+
    "\1\0\6\7\23\0\23\7\3\0\3\7\4\0\17\7"+
    "\1\214\6\7\23\0\23\7\3\0\3\7\4\0\4\7"+
    "\1\215\12\7\1\0\6\7\23\0\6\7\1\216\14\7"+
    "\3\0\3\7\4\0\17\7\1\0\6\7\23\0\23\7"+
    "\3\0\3\7\4\0\17\7\1\0\5\7\1\217\23\0"+
    "\1\7\1\220\21\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\23\0\23\7\3\0\3\7\4\0\4\7\1\221"+
    "\12\7\1\0\6\7\23\0\23\7\3\0\3\7\4\0"+
    "\4\7\1\222\12\7\1\0\6\7\23\0\16\7\1\223"+
    "\4\7\3\0\3\7\4\0\17\7\1\0\2\7\1\224"+
    "\3\7\23\0\23\7\3\0\3\7\4\0\17\7\1\0"+
    "\1\225\5\7\23\0\1\7\1\226\21\7\3\0\3\7"+
    "\4\0\17\7\1\0\6\7\23\0\3\7\1\227\17\7"+
    "\3\0\3\7\4\0\17\7\1\0\6\7\23\0\6\7"+
    "\1\230\14\7\3\0\3\7\4\0\17\7\1\0\6\7"+
    "\23\0\23\7\3\0\3\7\4\0\15\7\1\231\1\7"+
    "\1\0\6\7\23\0\7\7\1\232\13\7\3\0\3\7"+
    "\4\0\17\7\1\0\6\7\23\0\3\7\1\233\17\7"+
    "\3\0\3\7\4\0\17\7\1\0\6\7\40\0\1\234"+
    "\70\0\1\235\22\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\23\0\23\7\3\0\3\7\4\0\1\7\1\236"+
    "\15\7\1\0\6\7\23\0\23\7\3\0\3\7\4\0"+
    "\17\7\1\0\1\237\5\7\23\0\23\7\3\0\3\7"+
    "\4\0\4\7\1\240\12\7\1\0\6\7\23\0\23\7"+
    "\3\0\3\7\4\0\3\7\1\241\13\7\1\0\6\7"+
    "\23\0\23\7\3\0\3\7\4\0\6\7\1\242\10\7"+
    "\1\0\6\7\23\0\23\7\3\0\3\7\4\0\2\7"+
    "\1\243\14\7\1\0\6\7\23\0\23\7\3\0\3\7"+
    "\4\0\4\7\1\244\12\7\1\0\6\7\23\0\1\245"+
    "\22\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\4\7\1\246\16\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\23\0\23\7\3\0\3\7\4\0\12\7\1\247"+
    "\4\7\1\0\6\7\23\0\3\7\1\250\17\7\3\0"+
    "\3\7\4\0\17\7\1\0\6\7\24\0\1\251\104\0"+
    "\23\7\3\0\3\7\4\0\7\7\1\252\7\7\1\0"+
    "\6\7\23\0\1\253\22\7\3\0\3\7\4\0\17\7"+
    "\1\0\6\7\23\0\7\7\1\254\13\7\3\0\3\7"+
    "\4\0\17\7\1\0\6\7\23\0\23\7\3\0\3\7"+
    "\4\0\4\7\1\255\12\7\1\0\6\7\23\0\1\256"+
    "\22\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\3\7\1\257\17\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\23\0\5\7\1\260\15\7\3\0\3\7\4\0"+
    "\17\7\1\0\6\7\23\0\3\7\1\261\17\7\3\0"+
    "\3\7\4\0\17\7\1\0\6\7\24\0\1\262\104\0"+
    "\3\7\1\263\17\7\3\0\3\7\4\0\17\7\1\0"+
    "\6\7\23\0\3\7\1\264\17\7\3\0\3\7\4\0"+
    "\17\7\1\0\6\7\23\0\3\7\1\265\17\7\3\0"+
    "\3\7\4\0\17\7\1\0\6\7\23\0\23\7\3\0"+
    "\3\7\4\0\7\7\1\266\7\7\1\0\6\7\23\0"+
    "\23\7\3\0\3\7\4\0\4\7\1\267\12\7\1\0"+
    "\6\7\30\0\1\270\100\0\23\7\3\0\3\7\4\0"+
    "\6\7\1\271\10\7\1\0\6\7\23\0\3\7\1\272"+
    "\17\7\3\0\3\7\4\0\17\7\1\0\6\7\23\0"+
    "\1\273\22\7\3\0\3\7\4\0\17\7\1\0\6\7"+
    "\100\0\1\274\30\0\3\7\1\275\17\7\3\0\3\7"+
    "\4\0\17\7\1\0\6\7\23\0\7\7\1\276\13\7"+
    "\3\0\3\7\4\0\17\7\1\0\6\7\23\0\1\7"+
    "\1\277\21\7\3\0\3\7\4\0\17\7\1\0\6\7"+
    "\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9940];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\13\1\1\11\2\1\2\11"+
    "\14\1\2\11\6\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\14\1\1\0\1\1\1\11"+
    "\2\0\16\1\10\11\2\1\1\0\15\1\1\0\1\1"+
    "\1\11\15\1\1\0\21\1\1\0\17\1\1\0\14\1"+
    "\1\0\10\1\1\0\5\1\1\0\3\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Caracter no Esperado <"+yytext()+">");
            }
          case 61: break;
          case 2: 
            { System.out.print(yytext()); return symbol(sym.DIV);
            }
          case 62: break;
          case 3: 
            { System.out.print(" * "); return symbol(sym.TIMES);
            }
          case 63: break;
          case 4: 
            { System.out.print(yytext());  return symbol(sym.IDENT, new Integer(1));
            }
          case 64: break;
          case 5: 
            { System.out.print(yytext());
                         return symbol(sym.intConstant, new Integer(yytext()));
            }
          case 65: break;
          case 6: 
            { // Ignorar cuando se ingrese un espacio
            }
          case 66: break;
          case 7: 
            { System.out.print(yytext()); return symbol(sym.PERIOD);
            }
          case 67: break;
          case 8: 
            { System.out.print(" - "); return symbol(sym.MINUS);
            }
          case 68: break;
          case 9: 
            { System.out.print(" + "); return symbol(sym.PLUS);
            }
          case 69: break;
          case 10: 
            { System.out.print(yytext()); return symbol(sym.MOD);
            }
          case 70: break;
          case 11: 
            { System.out.print(yytext()); return symbol(sym.LESS);
            }
          case 71: break;
          case 12: 
            { System.out.print(yytext()); return symbol(sym.EQTO);
            }
          case 72: break;
          case 13: 
            { System.out.print(yytext()); return symbol(sym.GREATER);
            }
          case 73: break;
          case 14: 
            { System.out.print(yytext()); return symbol(sym.EXCLAM);
            }
          case 74: break;
          case 15: 
            { System.out.print(yytext()); return symbol(sym.SEMI);
            }
          case 75: break;
          case 16: 
            { System.out.print(yytext()); return symbol(sym.COMMA);
            }
          case 76: break;
          case 17: 
            { System.out.print(yytext()); return symbol(sym.LCOR);
            }
          case 77: break;
          case 18: 
            { System.out.print(yytext()); return symbol(sym.RCOR);
            }
          case 78: break;
          case 19: 
            { System.out.print(yytext()); return symbol(sym.LPAR);
            }
          case 79: break;
          case 20: 
            { System.out.print(yytext()); return symbol(sym.RPAR);
            }
          case 80: break;
          case 21: 
            { System.out.print(yytext()); return symbol(sym.LLLAV);
            }
          case 81: break;
          case 22: 
            { System.out.print(yytext()); return symbol(sym.RLLAV);
            }
          case 82: break;
          case 23: 
            { 
            }
          case 83: break;
          case 24: 
            { System.out.print(yytext());  return symbol(sym.doubleConstant, new Integer(1));
            }
          case 84: break;
          case 25: 
            { System.out.print(yytext());  return symbol(sym.IF, new Integer(1));
            }
          case 85: break;
          case 26: 
            { System.out.print(yytext()); return symbol(sym.LESSEQ);
            }
          case 86: break;
          case 27: 
            { System.out.print(yytext()); return symbol(sym.GREATEREQ);
            }
          case 87: break;
          case 28: 
            { System.out.print(yytext()); return symbol(sym.NOTEQ);
            }
          case 88: break;
          case 29: 
            { System.out.print(yytext()); return symbol(sym.AMPERSONS);
            }
          case 89: break;
          case 30: 
            { System.out.print(yytext()); return symbol(sym.OR);
            }
          case 90: break;
          case 31: 
            { System.out.print(yytext()); return symbol(sym.CORS);
            }
          case 91: break;
          case 32: 
            { System.out.print(yytext()); return symbol(sym.PARS);
            }
          case 92: break;
          case 33: 
            { System.out.print(yytext());  return symbol(sym.error, new Integer(1));
            }
          case 93: break;
          case 34: 
            { System.out.print(yytext());  return symbol(sym.FOR, new Integer(1));
            }
          case 94: break;
          case 35: 
            { System.out.print(yytext());  return symbol(sym.hexConstant, new Integer(1));
            }
          case 95: break;
          case 36: 
            { System.out.print(yytext());  return symbol(sym.stringConstant, new Integer(1));
            }
          case 96: break;
          case 37: 
            { System.out.print(yytext());  return symbol(sym.INT, new Integer(1));
            }
          case 97: break;
          case 38: 
            { System.out.print(yytext());  return symbol(sym.NEW, new Integer(1));
            }
          case 98: break;
          case 39: 
            { System.out.print(yytext());  return symbol(sym.boolConstant, new Integer(1));
            }
          case 99: break;
          case 40: 
            { System.out.print(yytext());  return symbol(sym.THIS, new Integer(1));
            }
          case 100: break;
          case 41: 
            { System.out.print(yytext());  return symbol(sym.ELSE, new Integer(1));
            }
          case 101: break;
          case 42: 
            { System.out.print(yytext());  return symbol(sym.VOID, new Integer(1));
            }
          case 102: break;
          case 43: 
            { System.out.print(yytext());  return symbol(sym.NULL, new Integer(1));
            }
          case 103: break;
          case 44: 
            { System.out.print(yytext());  return symbol(sym.BOOL, new Integer(1));
            }
          case 104: break;
          case 45: 
            { System.out.print(yytext());  return symbol(sym.BREAK, new Integer(1));
            }
          case 105: break;
          case 46: 
            { System.out.print(yytext());  return symbol(sym.CLASS, new Integer(1));
            }
          case 106: break;
          case 47: 
            { System.out.print(yytext());  return symbol(sym.WHILE, new Integer(1));
            }
          case 107: break;
          case 48: 
            { System.out.print(yytext());  return symbol(sym.PRINT, new Integer(1));
            }
          case 108: break;
          case 49: 
            { System.out.print(yytext());  return symbol(sym.RETURN, new Integer(1));
            }
          case 109: break;
          case 50: 
            { System.out.print(yytext());  return symbol(sym.STRING, new Integer(1));
            }
          case 110: break;
          case 51: 
            { System.out.print(yytext());  return symbol(sym.DOUBLE, new Integer(1));
            }
          case 111: break;
          case 52: 
            { System.out.print(yytext());  return symbol(sym.MALLOC, new Integer(1));
            }
          case 112: break;
          case 53: 
            { System.out.print(yytext());  return symbol(sym.EXTENDS, new Integer(1));
            }
          case 113: break;
          case 54: 
            { System.out.print(yytext());  return symbol(sym.SETBYTE, new Integer(1));
            }
          case 114: break;
          case 55: 
            { System.out.print(yytext());  return symbol(sym.GETBYTE, new Integer(1));
            }
          case 115: break;
          case 56: 
            { System.out.print(yytext());  return symbol(sym.READLINE, new Integer(1));
            }
          case 116: break;
          case 57: 
            { System.out.print(yytext());  return symbol(sym.INTERFACE, new Integer(1));
            }
          case 117: break;
          case 58: 
            { System.out.print(yytext());  return symbol(sym.NEWARRAY, new Integer(1));
            }
          case 118: break;
          case 59: 
            { System.out.print(yytext());  return symbol(sym.IMPLEMENTS, new Integer(1));
            }
          case 119: break;
          case 60: 
            { System.out.print(yytext());  return symbol(sym.READINTEGER, new Integer(1));
            }
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
